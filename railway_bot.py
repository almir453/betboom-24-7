import logging
import requests
import re
import asyncio
from telethon import TelegramClient, events
from playwright.async_api import async_playwright
import os
import random
import pickle

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_ID = 21658972
API_HASH = '175d08b358ee5a8c3c7f9555e90c7380'
SESSION_NAME = 'my_session'
BOT_TOKEN = "7996821935:AAG4TMSyo_00gW0tcv5D7Ojosu09edG8Tyk"
CHAT_ID = "8370087721"

# ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø
GROUP_IDS = [-1002445382077, -1003125973812, -1002276863165, -1007994393341]

# === –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ===
PROMOCODE_PATTERN = re.compile(
    r'\b(?!BETBOOM\b)(?!SLIV_FRIXA\b)(?!twitch\b)(?!shadowkekw\b)(?!https\b)([A/-Za-z0-9]{5,20})\b',
    re.IGNORECASE
)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
class TelegramLogHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        send_log_to_telegram(log_entry)


def send_log_to_telegram(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")


logger = logging.getLogger("__main__")
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
logger.addHandler(console_handler)
telegram_handler = TelegramLogHandler()
logger.addHandler(telegram_handler)
logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ª–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ Telegram.")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–∫–ª–∏–µ–Ω—Ç–∞ ===
client = TelegramClient(SESSION_NAME, API_ID, API_HASH, timeout=10)

# === Playwright –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫—É–∫–∞–º–∏ ===
browser = None
page = None


async def save_cookies(page, file_path="cookies.pkl"):
    cookies = await page.context.cookies()
    with open(file_path, "wb") as f:
        pickle.dump(cookies, f)
    logger.info(f"üç™ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {file_path}.")


async def load_cookies(page, file_path="cookies.pkl"):
    if os.path.exists(file_path):
        try:
            with open(file_path, "rb") as f:
                cookies = pickle.load(f)
            await page.context.add_cookies(cookies)
            logger.info("‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏: {e}")


async def init_playwright():
    global browser, page
    playwright = await async_playwright().start()
    browser = await playwright.chromium.launch(headless=True)
    context = await browser.new_context(user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
    page = await context.new_page()
    await load_cookies(page)
    await page.goto("https://betboom.ru/actions#online", timeout=60000)
    await save_cookies(page)


# === –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ===
async def enter_promocode(promocode):
    try:
        await page.wait_for_selector("#promocode", timeout=3000)
        await page.locator("#promocode").fill(promocode)
        await page.locator("#buttonpromo").click()
        logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' –≤–≤–µ–¥—ë–Ω.")
        return True
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ '{promocode}': {e}")
        return False


async def check_errors():
    try:
        await asyncio.sleep(4)
        error_element = await page.query_selector("span.Alert__AlertText-sc-1389vo9-1")
        if error_element:
            error_text = (await error_element.inner_text()).strip().lower()
            logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_text}")
            return error_text
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—à–∏–±–æ–∫: {e}")


async def human_like_delay():
    delay = random.uniform(0.7, 0.8)
    await asyncio.sleep(delay)
    logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay:.2f} —Å–µ–∫—É–Ω–¥.")


async def enter_promocode_with_retry(promocode):
    first_attempt = True
    while True:
        if first_attempt:
            logger.info(f"üîÅ –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promocode}")
            success = await enter_promocode(promocode)
            first_attempt = False
        else:
            logger.info(f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promocode}")
            await human_like_delay()
            success = await enter_promocode(promocode)

        if success:
            error = await check_errors()
            if error:
                if "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã" in error:
                    logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ '{error}', –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 0.9 —Å–µ–∫—É–Ω–¥—ã.")
                    await asyncio.sleep(0.9)
                    continue
                elif "–ª–∏–º–∏—Ç" in error or "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in error or "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error:
                    logger.info(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω: {error}")
                    return False
                else:
                    logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω! (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)")
                    return True
            else:
                logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω (–±–µ–∑ –æ—à–∏–±–æ–∫)!")
                return True
        else:
            await asyncio.sleep(0.5)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage(chats=GROUP_IDS))
async def handler(event):
    message_text = event.message.text.strip() if event.message.text else ""
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {repr(message_text)}")

    promocodes = [p for p in PROMOCODE_PATTERN.findall(message_text)]

    if promocodes:
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–º–æ–∫–æ–¥—ã: {promocodes}")
        tasks = [enter_promocode_with_retry(promocode) for promocode in promocodes]
        await asyncio.gather(*tasks)
    else:
        logger.info("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    try:
        await init_playwright()
        logger.info("üöÄ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await client.start()
        logger.info("‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
        await client.run_until_disconnected()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if browser is not None:
            await browser.close()
        await client.disconnect()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
