import os
import asyncio
import logging
import re
import time
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = "8370087721"

# ID –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ò–ù–§–û–†–ú–ê–¶–ò–Ø)
GROUP_IDS = [-1002445382077, -1003125973812, -1002276863165, -1007994393341]

class BetboomBot:
    def __init__(self):
        self.activation_history = []
    
    async def activate_promocode(self, promocode):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        try:
            await asyncio.sleep(2)
            success = True
            message = "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            
            self.activation_history.append({
                'promocode': promocode,
                'success': success,
                'timestamp': time.time()
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram
            self.send_log(f"üé∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: `{promocode}`")
            
            return success, message
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            self.send_log(f"üí• {error_msg}")
            return False, error_msg
    
    def send_log(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        try:
            requests.post(url, json=payload)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")

bot = BetboomBot()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∞ *Betboom Bot 24/7* üé∞\n\n"
        "ü§ñ *–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:*\n"
        "‚Ä¢ –†—É—á–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
        "‚Ä¢ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π\n" 
        "‚Ä¢ –†–∞–±–æ—Ç–∞ 24/7 –≤ –æ–±–ª–∞–∫–µ\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/promo CODE - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ —á–µ—Ä–µ–∑ /promo",
        parse_mode='Markdown'
    )

async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo CODE123")
        return
    
    promocode = context.args[0]
    processing_msg = await update.message.reply_text(f"‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é: `{promocode}`...", parse_mode='Markdown')
    
    try:
        success, message = await bot.activate_promocode(promocode)
        if success:
            await processing_msg.edit_text(f"‚úÖ *–£—Å–ø–µ—Ö!*\n`{promocode}`\n{message}", parse_mode='Markdown')
        else:
            await processing_msg.edit_text(f"‚ùå *–û—à–∏–±–∫–∞!*\n`{promocode}`\n{message}", parse_mode='Markdown')
    except Exception as e:
        await processing_msg.edit_text(f"üí• –û—à–∏–±–∫–∞: {str(e)}")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status_msg = (
        "ü§ñ *–°—Ç–∞—Ç—É—Å Betboom Bot*\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7\n"
        "üåê –û–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Render\n" 
        f"üìä –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {len(bot.activation_history)}\n"
        "‚ö° –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /promo CODE"
    )
    await update.message.reply_text(status_msg, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Å–ª–æ–≤–∞ –∏–∑ 5-20 —Å–∏–º–≤–æ–ª–æ–≤)
    promocodes = re.findall(r'\b[A-Za-z0-9]{5,20}\b', message_text)
    
    if promocodes:
        for promocode in promocodes[:2]:
            await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω: `{promocode}`\n–ê–∫—Ç–∏–≤–∏—Ä—É—é...", parse_mode='Markdown')
            try:
                success, message = await bot.activate_promocode(promocode)
                if success:
                    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—Ö: `{promocode}`", parse_mode='Markdown')
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{promocode}`", parse_mode='Markdown')
            except Exception as e:
                await update.message.reply_text(f"üí• –û—à–∏–±–∫–∞: {str(e)}")

def main():
    if not BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
        
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("promo", promo_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot...")
    bot.send_log("üöÄ Betboom Bot 24/7 –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()
