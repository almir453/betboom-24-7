import os
import asyncio
import logging
import re
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '8370087721').split(',')]

class SimpleBetboomBot:
    def __init__(self):
        self.PROMOCODE_PATTERN = re.compile(r'\b[A-Za-z0-9]{5,20}\b')
        self.activation_history = []
    
    def activate_promocode(self, promocode):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            time.sleep(2)
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å Betboom
            # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            success = True
            message = "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.activation_history.append({
                'promocode': promocode,
                'success': success,
                'timestamp': time.time()
            })
            
            return success, message
            
        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {str(e)}"

bot = SimpleBetboomBot()

def start_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    update.message.reply_text(
        "üé∞ *Betboom Bot 24/7* üé∞\n\n"
        "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–ª–∞–∫–µ!\n"
        "‚è∞ 24/7 –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/promo CODE - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n" 
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n"
        "üì® –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!",
        parse_mode='Markdown'
    )

def promo_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    if not context.args:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo CODE123")
        return
    
    promocode = context.args[0]
    processing_msg = update.message.reply_text(f"‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–æ–º–æ–∫–æ–¥: `{promocode}`...", parse_mode='Markdown')
    
    try:
        success, message = bot.activate_promocode(promocode)
        if success:
            processing_msg.edit_text(f"‚úÖ *–£—Å–ø–µ—Ö!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n{message}", parse_mode='Markdown')
        else:
            processing_msg.edit_text(f"‚ùå *–û—à–∏–±–∫–∞!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n{message}", parse_mode='Markdown')
    except Exception as e:
        processing_msg.edit_text(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def status_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    
    status_msg = (
        "ü§ñ *–°—Ç–∞—Ç—É—Å Betboom Bot*\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7\n"
        "üåê –û–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Render\n"
        "‚ö° –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω\n"
        f"üìä –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {len(bot.activation_history)}\n"
        f"üëë –ê–¥–º–∏–Ω: {ADMIN_IDS[0]}\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /promo CODE –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
    )
    
    update.message.reply_text(status_msg, parse_mode='Markdown')

def history_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    
    if not bot.activation_history:
        update.message.reply_text("üìù –ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—É—Å—Ç–∞")
        return
    
    history_text = "üìù *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n\n"
    for i, item in enumerate(list(reversed(bot.activation_history))[-10:], 1):
        status = "‚úÖ" if item['success'] else "‚ùå"
        history_text += f"{i}. {status} `{item['promocode']}`\n"
    
    update.message.reply_text(history_text, parse_mode='Markdown')

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    
    message_text = update.message.text
    promocodes = bot.PROMOCODE_PATTERN.findall(message_text)
    
    if promocodes:
        for promocode in promocodes[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞ —Ä–∞–∑
            update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n–ê–∫—Ç–∏–≤–∏—Ä—É—é...", parse_mode='Markdown')
            
            try:
                success, message = bot.activate_promocode(promocode)
                if success:
                    update.message.reply_text(f"‚úÖ –£—Å–ø–µ—Ö: `{promocode}`", parse_mode='Markdown')
                else:
                    update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: `{promocode}` - {message}", parse_mode='Markdown')
            except Exception as e:
                update.message.reply_text(f"üí• –û—à–∏–±–∫–∞: {str(e)}")

def main():
    if not BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
        
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start_command))
    dp.add_handler(CommandHandler("promo", promo_command))
    dp.add_handler(CommandHandler("status", status_command))
    dp.add_handler(CommandHandler("history", history_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    import time
    main()
