import logging
import requests
import re
import asyncio
import os
import random
import pickle
from telethon import TelegramClient, events
from playwright.async_api import async_playwright
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_ID = 21658972
API_HASH = '175d08b358ee5a8c3c7f9555e90c7380'
SESSION_NAME = 'my_session'
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = "8370087721"

# ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø
GROUP_IDS = [-1002445382077, -1003125973812, -1002276863165, -1007994393341]

# === –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ===
PROMOCODE_PATTERN = re.compile(
    r'\b(?!BETBOOM\b)(?!SLIV_FRIXA\b)(?!twitch\b)(?!shadowkekw\b)(?!https\b)([A-Za-z0-9]{5,20})\b',
    re.IGNORECASE
)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
class TelegramLogHandler(logging.Handler):
    def emit(self, record):
        log_entry = self.format(record)
        send_log_to_telegram(log_entry)

def send_log_to_telegram(message):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"}
    try:
        requests.post(url, json=payload)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Telegram: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("__main__")
logger.setLevel(logging.INFO)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
logger.addHandler(console_handler)
telegram_handler = TelegramLogHandler()
logger.addHandler(telegram_handler)

# === Playwright –∏ —Ä–∞–±–æ—Ç–∞ —Å –∫—É–∫–∞–º–∏ ===
browser = None
page = None

async def save_cookies(page, file_path="cookies.pkl"):
    cookies = await page.context.cookies()
    with open(file_path, "wb") as f:
        pickle.dump(cookies, f)
    logger.info(f"üç™ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {file_path}.")

async def load_cookies(page, file_path="cookies.pkl"):
    if os.path.exists(file_path):
        try:
            with open(file_path, "rb") as f:
                cookies = pickle.load(f)
            await page.context.add_cookies(cookies)
            logger.info("‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É–∫–∏: {e}")

async def init_playwright():
    global browser, page
    try:
        playwright = await async_playwright().start()
        browser = await playwright.chromium.launch(headless=True)
        context = await browser.new_context(user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64)")
        page = await context.new_page()
        await load_cookies(page)
        await page.goto("https://betboom.ru/actions#online", timeout=60000)
        await save_cookies(page)
        logger.info("‚úÖ Playwright –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Playwright: {e}")
        return False

# === –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ===
async def enter_promocode(promocode):
    try:
        await page.wait_for_selector("#promocode", timeout=3000)
        await page.locator("#promocode").fill(promocode)
        await page.locator("#buttonpromo").click()
        logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' –≤–≤–µ–¥—ë–Ω.")
        return True
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ '{promocode}': {e}")
        return False

async def check_errors():
    try:
        await asyncio.sleep(4)
        error_element = await page.query_selector("span.Alert__AlertText-sc-1389vo9-1")
        if error_element:
            error_text = (await error_element.inner_text()).strip().lower()
            logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error_text}")
            return error_text
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—à–∏–±–æ–∫: {e}")

async def human_like_delay():
    delay = random.uniform(0.7, 0.8)
    await asyncio.sleep(delay)
    logger.info(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay:.2f} —Å–µ–∫—É–Ω–¥.")

async def enter_promocode_with_retry(promocode):
    first_attempt = True
    while True:
        if first_attempt:
            logger.info(f"üîÅ –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promocode}")
            success = await enter_promocode(promocode)
            first_attempt = False
        else:
            logger.info(f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {promocode}")
            await human_like_delay()
            success = await enter_promocode(promocode)

        if success:
            error = await check_errors()
            if error:
                if "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã" in error:
                    logger.info(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ '{error}', –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 0.9 —Å–µ–∫—É–Ω–¥—ã.")
                    await asyncio.sleep(0.9)
                    continue
                elif "–ª–∏–º–∏—Ç" in error or "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in error or "–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error:
                    logger.info(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω: {error}")
                    return False
                else:
                    logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω! (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞)")
                    return True
            else:
                logger.info(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω (–±–µ–∑ –æ—à–∏–±–æ–∫)!")
                return True
        else:
            await asyncio.sleep(0.5)

# === –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ Telethon ===
async def start_monitoring():
    """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –≥—Ä—É–ø–ø"""
    try:
        client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
        
        @client.on(events.NewMessage(chats=GROUP_IDS))
        async def handler(event):
            message_text = event.message.text.strip() if event.message.text else ""
            logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {repr(message_text)}")

            promocodes = [p for p in PROMOCODE_PATTERN.findall(message_text)]

            if promocodes:
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–º–æ–∫–æ–¥—ã: {promocodes}")
                for promocode in promocodes:
                    success = await enter_promocode_with_retry(promocode)
                    if success:
                        await send_log_to_telegram(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: `{promocode}`")
                    else:
                        await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: `{promocode}`")
            else:
                logger.info("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        await client.start()
        logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø –∑–∞–ø—É—â–µ–Ω")
        return client
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return None

# === –ö–æ–º–∞–Ω–¥—ã –¥–ª—è Telegram –±–æ—Ç–∞ ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé∞ *Betboom Bot 24/7* üé∞\n\n"
        "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–±–ª–∞–∫–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≥—Ä—É–ø–ø—ã:\n"
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã\n" 
        "- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞ Betboom\n"
        "- –†–∞–±–æ—Ç–∞–µ—Ç 24/7\n\n"
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/promo CODE - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –≤—Ä—É—á–Ω—É—é\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/groups - –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø",
        parse_mode='Markdown'
    )

async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo CODE123")
        return
    
    promocode = context.args[0]
    processing_msg = await update.message.reply_text(f"‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–æ–º–æ–∫–æ–¥: `{promocode}`...", parse_mode='Markdown')
    
    try:
        success = await enter_promocode_with_retry(promocode)
        if success:
            await processing_msg.edit_text(f"‚úÖ *–£—Å–ø–µ—Ö!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ Betboom", parse_mode='Markdown')
        else:
            await processing_msg.edit_text(f"‚ùå *–û—à–∏–±–∫–∞!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", parse_mode='Markdown')
    except Exception as e:
        await processing_msg.edit_text(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status_msg = (
        "ü§ñ *–°—Ç–∞—Ç—É—Å Betboom Bot*\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7\n"
        "üåê –û–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Render\n"
        "üì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø –∞–∫—Ç–∏–≤–µ–Ω\n"
        f"üë• –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≥—Ä—É–ø–ø: {len(GROUP_IDS)}\n"
        "‚ö° –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø!"
    )
    await update.message.reply_text(status_msg, parse_mode='Markdown')

async def groups_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    groups_list = "\n".join([f"‚Ä¢ `{group_id}`" for group_id in GROUP_IDS])
    await update.message.reply_text(
        f"üìã *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≥—Ä—É–ø–ø—ã:*\n\n{groups_list}",
        parse_mode='Markdown'
    )

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Betboom Bot 24/7...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Playwright
    playwright_success = await init_playwright()
    if not playwright_success:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Playwright")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø
    telethon_client = await start_monitoring()
    if not telethon_client:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("promo", promo_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("groups", groups_command))
    
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã")
    await send_log_to_telegram("üöÄ Betboom Bot 24/7 –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
