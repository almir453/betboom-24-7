import os
import asyncio
import logging
import re
import time
import requests
from telethon import TelegramClient, events
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_ID = 21658972
API_HASH = '175d08b358ee5a8c3c7f9555e90c7380'
SESSION_NAME = 'my_session'
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
CHAT_ID = "8370087721"

# ID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –≥—Ä—É–ø–ø
GROUP_IDS = [-1002445382077, -1003125973812, -1002276863165, -1007994393341]

# === –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ===
PROMOCODE_PATTERN = re.compile(
    r'\b(?!BETBOOM\b)(?!SLIV_FRIXA\b)(?!twitch\b)(?!shadowkekw\b)(?!https\b)([A-Za-z0-9]{5,20})\b',
    re.IGNORECASE
)

class BetboomBot:
    def __init__(self):
        self.activation_history = []
        self.telethon_client = None
    
    async def activate_promocode(self, promocode, source="manual"):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –∫–∞–∫ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            await asyncio.sleep(2)
            success = True
            message = "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
            
            self.activation_history.append({
                'promocode': promocode,
                'success': success,
                'timestamp': time.time(),
                'source': source
            })
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram
            source_text = "–∏–∑ –≥—Ä—É–ø–ø—ã" if source == "group" else "–≤—Ä—É—á–Ω—É—é"
            self.send_log(f"üé∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {source_text}: `{promocode}`")
            
            return success, message
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            self.send_log(f"üí• {error_msg}")
            return False, error_msg
    
    def send_log(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        try:
            requests.post(url, json=payload)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {e}")
    
    async def start_group_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –≥—Ä—É–ø–ø"""
        try:
            self.telethon_client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
            
            @self.telethon_client.on(events.NewMessage(chats=GROUP_IDS))
            async def handler(event):
                message_text = event.message.text.strip() if event.message.text else ""
                logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã: {repr(message_text)}")

                promocodes = [p for p in PROMOCODE_PATTERN.findall(message_text)]

                if promocodes:
                    logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –≥—Ä—É–ø–ø–µ: {promocodes}")
                    self.send_log(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ –≥—Ä—É–ø–ø–µ: `{promocodes}`")
                    
                    for promocode in promocodes[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞ —Ä–∞–∑
                        success, message = await self.activate_promocode(promocode, "group")
                        if success:
                            logger.info(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–∑ –≥—Ä—É–ø–ø—ã")
                            self.send_log(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: `{promocode}`")
                        else:
                            logger.info(f"üí• –ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.info("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")

            await self.telethon_client.start()
            logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø –∑–∞–ø—É—â–µ–Ω")
            self.send_log("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø –∑–∞–ø—É—â–µ–Ω!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.send_log(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø: {e}")
            return False

bot = BetboomBot()

async def handle_private_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    message_text = update.message.text
    
    # –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    promocodes = PROMOCODE_PATTERN.findall(message_text)
    
    if promocodes:
        for promocode in promocodes[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞ —Ä–∞–∑
            # –°—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_msg = await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é...", 
                parse_mode='Markdown'
            )
            
            try:
                success, message = await bot.activate_promocode(promocode, "manual")
                if success:
                    await processing_msg.edit_text(
                        f"‚úÖ *–£—Å–ø–µ—Ö!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n{message}", 
                        parse_mode='Markdown'
                    )
                else:
                    await processing_msg.edit_text(
                        f"‚ùå *–û—à–∏–±–∫–∞!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n{message}", 
                        parse_mode='Markdown'
                    )
            except Exception as e:
                await processing_msg.edit_text(f"üí• –û—à–∏–±–∫–∞: {str(e)}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        await update.message.reply_text(
            "üé∞ *Betboom Bot 24/7*\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ `PROMO123`\n"
            "‚Ä¢ `–í–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ ABC456`\n" 
            "‚Ä¢ `ABC789 –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏`\n\n"
            "ü§ñ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥!",
            parse_mode='Markdown'
        )

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Betboom Bot 24/7...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø
    monitoring_success = await bot.start_group_monitoring()
    if not monitoring_success:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_private_message))
    
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot...")
    bot.send_log("üöÄ Betboom Bot 24/7 –∑–∞–ø—É—â–µ–Ω!\nüì° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø –∞–∫—Ç–∏–≤–µ–Ω\nüí¨ –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
