import os
import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from bot_core import BetboomBot

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = BetboomBot()

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = [int(x) for x in os.getenv('ADMIN_IDS', '').split(',') if x]


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await update.message.reply_text(
        "üé∞ *Betboom Bot 24/7* üé∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/promo CODE - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/history - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å—ã–ª–∞–π –ø—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!",
        parse_mode='Markdown'
    )


async def promo_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo CODE123")
        return

    promocode = context.args[0]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await update.message.reply_text(f"‚è≥ –ê–∫—Ç–∏–≤–∏—Ä—É—é –ø—Ä–æ–º–æ–∫–æ–¥: `{promocode}`...", parse_mode='Markdown')

    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        result = await bot.process_single_promocode(promocode)

        if result['success']:
            await processing_msg.edit_text(f"‚úÖ *–£—Å–ø–µ—Ö!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {result['message']}",
                                           parse_mode='Markdown')
        else:
            await processing_msg.edit_text(f"‚ùå *–û—à–∏–±–∫–∞!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n–û—à–∏–±–∫–∞: {result['message']}",
                                           parse_mode='Markdown')

    except Exception as e:
        await processing_msg.edit_text(f"üí• *–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞!*\n–ü—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n–û—à–∏–±–∫–∞: {str(e)}",
                                       parse_mode='Markdown')


async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    status_msg = "ü§ñ *–°—Ç–∞—Ç—É—Å Betboom Bot*\n\n"
    status_msg += "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7\n"
    status_msg += "üåê –û–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä\n"
    status_msg += "‚ö° –í—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω\n"
    status_msg += f"üëë –ê–¥–º–∏–Ω—ã: {len(ADMIN_IDS)}\n\n"
    status_msg += "–ò—Å–ø–æ–ª—å–∑—É–π /promo CODE –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"

    await update.message.reply_text(status_msg, parse_mode='Markdown')


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return

    message_text = update.message.text

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    promocodes = bot.PROMOCODE_PATTERN.findall(message_text)

    if promocodes:
        for promocode in promocodes:
            await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥: `{promocode}`\n–ê–∫—Ç–∏–≤–∏—Ä—É—é...", parse_mode='Markdown')

            try:
                result = await bot.process_single_promocode(promocode)

                if result['success']:
                    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—Ö: `{promocode}`", parse_mode='Markdown')
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ `{promocode}`: {result['message']}",
                                                    parse_mode='Markdown')

            except Exception as e:
                await update.message.reply_text(f"üí• –û—à–∏–±–∫–∞: {str(e)}")


async def init_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Betboom Bot...")
    success = await bot.init_browser()
    if success:
        logger.info("‚úÖ Betboom Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("promo", promo_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram Bot...")
    application.run_polling()


if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    asyncio.run(init_bot())
    main()
